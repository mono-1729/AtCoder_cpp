#include <bits/stdc++.h>
#include <unordered_map>
#include <stdlib.h>
#include <boost/multiprecision/cpp_int.hpp>
#include <atcoder/all>
using namespace atcoder;
using namespace boost::multiprecision;
using namespace std;
#define rep(i, a, n) for(ll i = a; i < n; i++)
#define rrep(i, a, n) for(ll i = a; i >= n; i--)
#define ll long long
#define pii pair<int, int>
#define pll pair<ll, ll>
//constexpr ll MOD = 1000000007;
constexpr ll MOD = 998244353;
constexpr int IINF = 1001001001;
constexpr ll INF = 1LL<<60;
template<class t,class u> void chmax(t&a,u b){if(a<b)a=b;}
template<class t,class u> void chmin(t&a,u b){if(b<a)a=b;}

using mint = modint998244353;

ll gcd(ll a, ll b){
    if(a%b == 0){
      return b;
    }else{
      return gcd(b, a%b);
    }
}

ll lcm(ll a, ll b){
    return a*b / gcd(a, b);
}

ll powMod(ll x, ll n) {
    if (n == 0) return 1 % MOD;
    ll val = powMod(x, n / 2);
    val *= val;
    val %= MOD;
    if (n % 2 == 1) val *= x;
    return val % MOD;
}

int main() {

    string s = "0009813542688910696761530912659470068694798822374877330716388616290480863591756624141315014720314033366045142296368989205103042198233562315996074582924435721295387634936211972522080471050049067713444553483807654563297350343473994111874386653581943081452404317958783120706575073601570166830225711481844946025515210991167811579980372914622178606476938174681059862610402355250245338567222767419038272816486751717369970559371933267909715407262021589793915603532875368007850834151128557409224730127576054955839057899901864573110893032384690873405299313052011776251226692836113837095191364082433758586849852796859666339548577036310107948969578017664376840039254170755642787046123650637880274779195289499509322865554465161923454367026496565260058881256133464180569185475956820412168792934249263984298331697742885181550539744847890088321884200196270853778213935230618253189401373895976447497546614327772325809617271835132482826300294406280667320902845927379784102060843964671246319921491658488714425907752698724239450441609421";
    cout << s << endl << s << s << endl;
    return 0;
}